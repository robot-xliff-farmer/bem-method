<?xml version="1.0" encoding="UTF-8" ?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" version="1.2">  <file original="method/solved-problems/solved-problems.ru.md.html" source-language="ru" target-language="en" datatype="html" build-num="540">  <body>  <trans-unit id="tu1" resname="--------id" restype="x-h1" xml:space="preserve" approved="yes"><source xml:lang="ru">Решение распространенных проблем веб-разработки с помощью БЭМ</source><target state="translated" xml:lang="en">Using BEM to solve common issues in web development</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu2" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Методология БЭМ задает <bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>правила по именованию CSS-селекторов<ept id="1">&lt;/a&gt;</ept>, соблюдение которых решает ряд проблем веб-разработки и отвечает на следующие вопросы:</source><target state="translated" xml:lang="en">The BEM methodology defines <bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>CSS-selector naming conventions<ept id="1">&lt;/a&gt;</ept> that solve a range of web development problems and address the following issues:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu3" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#Как-упростить-код-и-облегчить-рефакторинг"&gt;</bpt>Как упростить код и облегчить рефакторинг<ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-упростить-код-и-облегчить-рефакторинг"&gt;</bpt>How to simplify code and facilitate refactoring<ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu4" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>Как получить самодокументируемый код<ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>How to get self-documenting code<ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu5" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#Как-начать-повторно-использовать-код-и-избежать-взаимного-влияния-компонентов-друг-на-друга"&gt;</bpt>Как начать повторно использовать код и избежать взаимного влияния компонентов друг на друга<ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-начать-повторно-использовать-код-и-избежать-взаимного-влияния-компонентов-друг-на-друга"&gt;</bpt>How to start reusing code without letting components influence each other<ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu6" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="#Как-разместить-несколько-сущностей-на-одном-dom-узле-и-избежать-copy-paste"&gt;</bpt>Как разместить несколько сущностей на одном DOM-узле и избежать «Copy-Paste»<ept id="1">&lt;/a&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-разместить-несколько-сущностей-на-одном-dom-узле-и-избежать-copy-paste"&gt;</bpt>How to host multiple entities on the same DOM node and avoid "Copy-Paste"<ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu7" restype="x-paragraph" xml:space="preserve" approved="yes">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-simple-code"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
   <target xml:lang="en" state="needs-review-translation"><bpt id="1">&lt;a preserve="1" name="bem-simple-code"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu8" resname="------id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Как упростить код и облегчить рефакторинг</source><target state="translated" xml:lang="en">How to simplify code and facilitate refactoring</target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="2" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#Как-упростить-код-и-облегчить-рефакторинг"&gt;</bpt>Как упростить код и облегчить рефакторинг<ept id="1">&lt;/a&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-упростить-код-и-облегчить-рефакторинг"&gt;</bpt>How to simplify code and facilitate refactoring<ept id="1">&lt;/a&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu9" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Проблема<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Problem<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu10" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При верстке проекта компоненты интерфейса получают имена на основе контекста, с которым работает разработчик. Обычно контекстом служит страница или какая-то ее часть.</source><target state="translated" xml:lang="en">During project layout, interface components are given names based on the context the developer is working with. The context is usually a page or part of one.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu11" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Когда страницу верстает один разработчик в короткие сроки, коллизии имен можно избежать. Но если над проектом работают несколько человек или правки нужно внести спустя какое-то время, то отследить зависимые имена компонентов становится сложно. В больших проектах результатом правки одного класса может стать десяток «разъехавшихся» страниц.</source><target state="translated" xml:lang="en">When just one developer is working with the layout for a brief period, name collisions are easily avoided. But if multiple people are working on a project, or edits need to be made at some later point, it is difficult to keep track of component name dependencies. In large projects, modifying a single class may lead to dozens of affected pages.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu12" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, для создания навигационного меню могут использоваться следующие имена классов:</source><target state="translated" xml:lang="en">For example, the following class names can be used for creating a navigation menu:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu13" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu14" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">К ним могут быть написаны CSS-правила:</source><target state="translated" xml:lang="en">They might have the following CSS rules:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu15" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}

.active
{
    font-weight: bold;
    background: #ffc7c7;
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}

.active
{
    font-weight: bold;
    background: #ffc7c7;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu16" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если понадобится добавить на страницу другой компонент, содержащий пункты, то стили для нового <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> повлияют на пункты из существующего навигационного меню.</source><target state="translated" xml:lang="en">If we need to add another component containing menu items to the page, the styles for the new <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> will affect the items from the existing navigation menu.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu17" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Или предположим, что в навигационном меню нужно изменить правила класса <bpt id="1">&lt;code&gt;</bpt>.active<ept id="1">&lt;/code&gt;</ept>. По имени непонятно, какие компоненты его используют. Может оказаться, что на другой странице существует, например, кнопка <bpt id="2">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="button active"&gt;</ph>Нажми меня!<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="2">&lt;/code&gt;</ept>. Тогда изменение правил для <bpt id="3">&lt;code&gt;</bpt>.active<ept id="3">&lt;/code&gt;</ept> повлияет на стили этой кнопки.</source><target state="translated" xml:lang="en">Or let's say we need to change the rules for the <bpt id="1">&lt;code&gt;</bpt>.active<ept id="1">&lt;/code&gt;</ept> class in the navigation menu. We can't tell from the name which components use it. For example, there could be a <bpt id="2">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="button active"&gt;</ph>Click me!<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="2">&lt;/code&gt;</ept> button on another page. In that case, changing the rules for <bpt id="3">&lt;code&gt;</bpt>.active<ept id="3">&lt;/code&gt;</ept> would affect the style of that button.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu18" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Чтобы разобраться, можно ли безболезненно изменить стили для класса <bpt id="1">&lt;code&gt;</bpt>.active<ept id="1">&lt;/code&gt;</ept>, разработчику придется просмотреть всю структуру страницы или проекта. Любое изменение потребует значительных временных затрат только на поиск зависимых компонентов.</source><target state="translated" xml:lang="en">In order to find out whether styles can be painlessly changed for the <bpt id="1">&lt;code&gt;</bpt>.active<ept id="1">&lt;/code&gt;</ept> class, the developer will have to examine the structure of the entire page or project. Any change consumes a significant amount of time just searching for dependent components.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu19" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Решение<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Solution<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu20" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Методология БЭМ решает проблему коллизии имен при помощи <bpt id="1">&lt;a href="../naming/naming-convention.ru.md#Соглашение-по-именованию-css-селекторов"&gt;</bpt>соглашения по именованию CSS-классов<ept id="1">&lt;/a&gt;</ept>, предоставляя всем компонентам и их составляющим уникальные имена.</source><target state="translated" xml:lang="en">The BEM methodology solves the collision issue using <bpt id="1">&lt;a href="../naming/naming-convention.ru.md#Соглашение-по-именованию-css-селекторов"&gt;</bpt>naming conventions for CSS classes<ept id="1">&lt;/a&gt;</ept>, providing unique names for all components and their parts.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu21" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Применение правил по именованию позволяет:</source><target state="translated" xml:lang="en">Using naming conventions allows us to:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu22" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">задавать уникальные имена <bpt id="1">&lt;a href="../definitions/definitions.ru.md#БЭМ-сущность"&gt;</bpt>БЭМ-сущностям<ept id="1">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en">define unique names for <bpt id="1">&lt;a href="../definitions/definitions.ru.md#БЭМ-сущность"&gt;</bpt>BEM entities<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu23" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">отслеживать иерархические связи в пределах блока;</source><target state="translated" xml:lang="en">track hierarchical relationships within a block.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu24" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">упрощать восприятие кода;</source><target state="translated" xml:lang="en">simplify the code.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu25" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">получать <bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>самодокуметируемый код<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">get <bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>self-documenting code<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="3" match-quality="80" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>Как получить самодокументируемый код<ept id="1">&lt;/a&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>How to get self-documenting code<ept id="1">&lt;/a&gt;</ept></target>

<?id 1442220206799?></alt-trans></trans-unit>
      <trans-unit id="tu26" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Рассмотрим тот же пример навигационного меню:</source><target state="translated" xml:lang="en">Let's take the same navigation menu example:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu27" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu28" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Но применим к нему правила именования БЭМ: класс <bpt id="1">&lt;code&gt;</bpt>nav<ept id="1">&lt;/code&gt;</ept> будет обозначать имя блока, <bpt id="2">&lt;code&gt;</bpt>nav__item<ept id="2">&lt;/code&gt;</ept> и <bpt id="3">&lt;code&gt;</bpt>nav__link<ept id="3">&lt;/code&gt;</ept> — имена элементов, а <bpt id="4">&lt;code&gt;</bpt>nav__item_active<ept id="4">&lt;/code&gt;</ept> — имя модификатора элемента <bpt id="5">&lt;code&gt;</bpt>item<ept id="5">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">But we'll apply BEM naming conventions to it. The <bpt id="1">&lt;code&gt;</bpt>nav<ept id="1">&lt;/code&gt;</ept> class will designate the block name, <bpt id="2">&lt;code&gt;</bpt>nav__item<ept id="2">&lt;/code&gt;</ept> and <bpt id="3">&lt;code&gt;</bpt>nav__link<ept id="3">&lt;/code&gt;</ept> will designate the element names, and <bpt id="4">&lt;code&gt;</bpt>nav__item_active<ept id="4">&lt;/code&gt;</ept> will indicate the name of a modifier for the <bpt id="5">&lt;code&gt;</bpt>item<ept id="5">&lt;/code&gt;</ept> element.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu29" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В таком случае запись будет следующей:</source><target state="translated" xml:lang="en">In this case, the entry will look like this:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu30" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="12" match-quality="98" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu31" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">И, соответственно, CSS будет иметь такой вид:</source><target state="translated" xml:lang="en">And the CSS will look like this:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu32" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.nav__item
{
    padding: 4px 10px;
    color: black;
}

.nav__item_active
{
    font-weight: bold;
    background: #ffc7c7;
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.nav__item
{
    padding: 4px 10px;
    color: black;
}

.nav__item_active
{
    font-weight: bold;
    background: #ffc7c7;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="14" match-quality="85" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}

.active
{
    font-weight: bold;
    background: #ffc7c7;
}<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}

.active
{
    font-weight: bold;
    background: #ffc7c7;
}<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu33" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Новые имена CSS-классов содержат всю информацию о структуре блока. А это значит, что больше не нужно просматривать HTML-код страницы, чтобы определить все зависимости. Cелектор всегда содержит знания о том, на какой блок или элемент влияют его правила (в данном случае на элемент <bpt id="1">&lt;code&gt;</bpt>nav__item<ept id="1">&lt;/code&gt;</ept>). Разработчику не придется думать о возможном существовании кнопки <bpt id="2">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="button active"&gt;</ph>Нажми меня!<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="2">&lt;/code&gt;</ept>, так как еe CSS-правила будут записаны как <bpt id="3">&lt;code&gt;</bpt>.button_active<ept id="3">&lt;/code&gt;</ept> и не будут зависеть от правил модификатора <bpt id="4">&lt;code&gt;</bpt>active<ept id="4">&lt;/code&gt;</ept> для пункта меню (<bpt id="5">&lt;code&gt;</bpt>nav__item_active<ept id="5">&lt;/code&gt;</ept>).</source><target state="translated" xml:lang="en">The new CSS class names contain all the information about the block structure. This means that we no longer need to look at the page's HTML code to determine all the dependencies. The selector always contains knowledge of which blocks or elements are affected by its rules (in this case, the <bpt id="1">&lt;code&gt;</bpt>nav__item<ept id="1">&lt;/code&gt;</ept> element). The developer doesn't need to think about the possibility of a <bpt id="2">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="button active"&gt;</ph>Click me!<ph id="swf_auto_html_tag-1">&lt;/div&gt;</ph><ept id="2">&lt;/code&gt;</ept> button existing somewhere, because its CSS rules will be written as <bpt id="3">&lt;code&gt;</bpt>.button_active<ept id="3">&lt;/code&gt;</ept> and won't depend on the rules for the <bpt id="4">&lt;code&gt;</bpt>active<ept id="4">&lt;/code&gt;</ept> modifier for the menu item (<bpt id="5">&lt;code&gt;</bpt>nav__item_active<ept id="5">&lt;/code&gt;</ept>).</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu34" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Использование длинных имен имеет следующие недостатки:</source><target state="translated" xml:lang="en">Using long names has the following disadvantages:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu35" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Результирующий код весит больше. Эта проблема решается <bpt id="1">&lt;code&gt;</bpt>gzip<ept id="1">&lt;/code&gt;</ept>, который сжимает повторяющиеся последовательности в именах.</source><target state="translated" xml:lang="en">The resulting code base is heavier. This problem is solved by using <bpt id="1">&lt;code&gt;</bpt>gzip<ept id="1">&lt;/code&gt;</ept>, which compresses repetitive sequences in names.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu36" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Времени на написание классов тратится больше. Эту проблему помогают решить автозаполнение в редакторе, использование CSS-препроцессоров и шаблонизаторов, которые автоматически добавляют префиксы. Длинные имена классов предоставляют явные связи между составными частями компонентов, что экономит время на изучение архитектуры проекта.</source><target state="translated" xml:lang="en">More time is spent on writing classes. This burden is eased by using autocomplete in the editor, along with CSS preprocessors and template engines that automatically add prefixes. Long class names provide explicit connections between parts of components, which saves time on analyzing the project architecture.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu37" resname="----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Как получить самодокументируемый код</source><target xml:lang="en" state="translated">How to get self-documenting code</target><?sid 1585705226-0?><alt-trans match-quality="100" xml:space="default" origin="bem">
<?id 1585705226-0-115155?>
<source xml:lang="ru">Как получить самодокументируемый код</source>
<target xml:lang="en">How to get self-documenting code</target>
<prop-group>
<prop prop-type="creationdate">20150914T081728Z</prop>
<prop prop-type="tuid">1585705226-0-115155</prop>
</prop-group>
</alt-trans><alt-trans origin="autoFuzzy" ts="3" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>Как получить самодокументируемый код<ept id="1">&lt;/a&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>How to get self-documenting code<ept id="1">&lt;/a&gt;</ept></target>

<?id 1442220206920?></alt-trans><alt-trans origin="autoFuzzy" ts="24" match-quality="79" tool="Swordfish">
<source xml:lang="ru">получать <bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>самодокуметируемый код<ept id="1">&lt;/a&gt;</ept>.</source>
<target state="translated" xml:lang="en">get <bpt id="1">&lt;a href="#Как-получить-самодокументируемый-код"&gt;</bpt>self-documenting code<ept id="1">&lt;/a&gt;</ept>.</target>
</alt-trans></trans-unit>
      <trans-unit id="tu38" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Проблема<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Problem<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu39" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При переходе на новый проект разработчик тратит много усилий на то, чтобы понять, как все устроено, где что лежит и как работает код. Порой именно на такое изучение уходит большая часть времени, а вовсе не на реализацию функциональности или исправление ошибки.</source><target state="translated" xml:lang="en">When switching to a new project, a developer invests considerable effort learning how everything is organized, where things are, and how the code works. In some cases, more time is spent on this investigation than on implementing functionality or fixing bugs.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu40" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Решение<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Solution<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu41" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Одна из целей БЭМ — дать понять, что делает тот или иной код, только по названиям классов. Идея самодокументируемого кода заключается в том, чтобы при просмотре CSS-классов, переменных и функций было понятно, как работает код, и как взаимодействуют компоненты интерфейса.</source><target state="translated" xml:lang="en">One of the goals of BEM is to make it clear what a piece of code does just by the class names. The idea of self-documenting code is that looking at CSS classes, variables, and functions provides enough information on how the code works and how the interface components interact.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu42" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Используя БЭМ, можно получить HTML с именами классов, показывающих взаимодействие следующих частей кода:</source><target state="translated" xml:lang="en">Using BEM, you can get HTML with class names that show the interaction of the following parts of code:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu43" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">независимых <bpt id="1">&lt;a href="../definitions/definitions.ru.md#Блок"&gt;</bpt>блоков<ept id="1">&lt;/a&gt;</ept>;</source><target state="translated" xml:lang="en">independent <bpt id="1">&lt;a href="../definitions/definitions.ru.md#Блок"&gt;</bpt>blocks<ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu44" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="../definitions/definitions.ru.md#Элемент"&gt;</bpt>элементов<ept id="1">&lt;/a&gt;</ept> (дочерних компонентов) этого блока;</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="../definitions/definitions.ru.md#Элемент"&gt;</bpt>elements<ept id="1">&lt;/a&gt;</ept> (child components) of a block</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu45" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="../definitions/definitions.ru.md#Модификатор"&gt;</bpt>модификаторов<ept id="1">&lt;/a&gt;</ept> блока или элемента.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="../definitions/definitions.ru.md#Модификатор"&gt;</bpt>modifiers<ept id="1">&lt;/a&gt;</ept> of a block or element</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu46" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Рассмотрим пример с формой поиска на сайте. Не будем обращаться к HTML, попытаемся прочитать только CSS и понять, какую часть интерфейса он описывает.</source><target state="translated" xml:lang="en">Here is an example with a search form on a website. We won't look at the HTML. We'll try to just read the CSS and understand which part of the interface it describes.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu47" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Вариант реализации формы в классической верстке:</source><target state="translated" xml:lang="en">Implementation of the form in a classical layout:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu48" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>form {}

input
{
    background: red;
}

input[type=submit]
{
    background: buttonface
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>form {}

input
{
    background: red;
}

input[type=submit]
{
    background: buttonface
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu49" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такой способ записи не отражает связи между:</source><target state="translated" xml:lang="en">This doesn't reflect the relationships between:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu50" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">компонентами и их составными частями;</source><target state="translated" xml:lang="en">components and their parts.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu51" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">селекторами и конкретными компонентами интерфейса, к которым они относятся.</source><target state="translated" xml:lang="en">selectors and specific components of the interface that they are related to.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu52" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Использование глобальных селекторов делает код проекта нерасширяемым, так как внесение минимальных изменений повлечет за собой правки во всех зависимых правилах.</source><target state="translated" xml:lang="en">Using global selectors makes the project code non-extensible, as even the smallest changes will entail edits to all the dependent rules.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu53" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Напишем CSS на классы:</source><target state="translated" xml:lang="en">Let's write the CSS for classes:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu54" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.form {}
.field {}
.submit {}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.form {}
.field {}
.submit {}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu55" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Код стал информативнее: теперь понятно, что есть форма, поле и какой-то компонент <bpt id="1">&lt;code&gt;</bpt>submit<ept id="1">&lt;/code&gt;</ept>. Но такие имена все еще не дают понять, относится ли поле (<bpt id="2">&lt;code&gt;</bpt>field<ept id="2">&lt;/code&gt;</ept>) к форме (<bpt id="3">&lt;code&gt;</bpt>form<ept id="3">&lt;/code&gt;</ept>), или что произойдет, если полей или форм на странице будет несколько. Снова возникает необходимость обращаться к HTML.</source><target state="translated" xml:lang="en">The code is more informative. Now it is clear that there is a form, a field, and a <bpt id="1">&lt;code&gt;</bpt>submit<ept id="1">&lt;/code&gt;</ept> component. But these names still don't tell us whether <bpt id="2">&lt;code&gt;</bpt>field<ept id="2">&lt;/code&gt;</ept> belongs to <bpt id="3">&lt;code&gt;</bpt>form<ept id="3">&lt;/code&gt;</ept>, or what will happen if there are multiple fields or forms on the page. Once again we must return to the HTML.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu56" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Перепишем пример, используя <bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>соглашение по именованию БЭМ<ept id="1">&lt;/a&gt;</ept>:</source><target state="translated" xml:lang="en">We'll rewrite the example using <bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>BEM naming conventions<ept id="1">&lt;/a&gt;</ept>:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu57" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.form {}
.form_search {}
.form__field {}
.form__submit-button {}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.form {}
.form_search {}
.form__field {}
.form__submit-button {}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu58" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такая запись дает понять, как работает данный код. Имена CSS-классов показывают, что:</source><target state="translated" xml:lang="en">Now we can see how this code works. The CSS class names show that:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu59" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Существует форма, реализованная блоком <bpt id="1">&lt;code&gt;</bpt>form<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">There is a form implemented by the <bpt id="1">&lt;code&gt;</bpt>form<ept id="1">&lt;/code&gt;</ept> block.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu60" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">Модификатор <bpt id="1">&lt;code&gt;</bpt>form_search<ept id="1">&lt;/code&gt;</ept> указывает на то, что речь идет о форме поиска.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>form_search<ept id="1">&lt;/code&gt;</ept> modifier indicates that this is a search form.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu61" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">У формы есть составляющие — вложенные элементы: поле <bpt id="1">&lt;code&gt;</bpt>form__field<ept id="1">&lt;/code&gt;</ept> и кнопка <bpt id="2">&lt;code&gt;</bpt>form__submit-button<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">The form has nested elements:  <bpt id="1">&lt;code&gt;</bpt>form__field<ept id="1">&lt;/code&gt;</ept> and <bpt id="2">&lt;code&gt;</bpt>form__submit-button<ept id="2">&lt;/code&gt;</ept>.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu62" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Следование соглашению по именованию БЭМ позволяет понять структуру блока без подробного изучения HTML. Даже при появлении на странице еще одного поля (кроме <bpt id="1">&lt;code&gt;</bpt>form__field<ept id="1">&lt;/code&gt;</ept>), его правила никак не будут влиять на элементы поисковой формы. Новое поле будет реализовано как элемент другого блока и будет иметь свое уникальное имя. Например, <bpt id="2">&lt;code&gt;</bpt>attach__field<ept id="2">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Following the BEM naming convention allows us to understand the structure of a block without studying the HTML in detail. Even if another field appears on the page (besides <bpt id="1">&lt;code&gt;</bpt>form__field<ept id="1">&lt;/code&gt;</ept>), its rules won't affect the search form elements in any way. The new field will be implemented as an element of another block, and will have its own unique name. For example, <bpt id="2">&lt;code&gt;</bpt>attach__field<ept id="2">&lt;/code&gt;</ept>.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu63" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Правила именования БЭМ позволяют сделать код проекта однозначным и, как следствие, информативным. Это снижает порог входа для других разработчиков.</source><target state="translated" xml:lang="en">The BEM naming rules help to make the project code unambiguous and informative. This reduces the learning curve for other developers.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu64" resname="-------------id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Как начать повторно использовать код и избежать взаимного влияния компонентов друг на друга</source><target xml:lang="en" state="translated">How to start reusing code without letting components influence each other</target><?sid 1585705226-0?><alt-trans match-quality="100" xml:space="default" origin="bem">
<?id 1585705226-0-115156?>
<source xml:lang="ru">Как начать повторно использовать код и избежать взаимного влияния компонентов друг на друга</source>
<target xml:lang="en">How to start reusing code without letting components influence each other</target>
<prop-group>
<prop prop-type="creationdate">20150914T081728Z</prop>
<prop prop-type="tuid">1585705226-0-115156</prop>
</prop-group>
</alt-trans><alt-trans origin="autoFuzzy" ts="4" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#Как-начать-повторно-использовать-код-и-избежать-взаимного-влияния-компонентов-друг-на-друга"&gt;</bpt>Как начать повторно использовать код и избежать взаимного влияния компонентов друг на друга<ept id="1">&lt;/a&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-начать-повторно-использовать-код-и-избежать-взаимного-влияния-компонентов-друг-на-друга"&gt;</bpt>How to start reusing code without letting components influence each other<ept id="1">&lt;/a&gt;</ept></target>

<?id 1442220207197?></alt-trans></trans-unit>
      <trans-unit id="tu65" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Проблема<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Problem<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu66" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Разработчик использует схожий набор компонентов при разработке страниц одного проекта. Например, на странице может быть несколько типов блока <bpt id="1">&lt;code&gt;</bpt>menu<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">The developer uses a similar set of components when developing pages in the same project. For example, a page may have several types of <bpt id="1">&lt;code&gt;</bpt>menu<ept id="1">&lt;/code&gt;</ept> blocks.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu67" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Рассмотрим проблему на примере навигационного меню:</source><target state="translated" xml:lang="en">We'll use the navigation menu example to examine this problem:</target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="25" match-quality="72" tool="Swordfish">
<source xml:lang="ru">Рассмотрим тот же пример навигационного меню:</source>
<target state="translated" xml:lang="en">Let's take the same navigation menu example:</target>
</alt-trans></trans-unit>
      <trans-unit id="tu68" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="12" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans><alt-trans origin="autoFuzzy" ts="29" match-quality="98" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu69" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">CSS-стили к пункту <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> могут быть записаны как:</source><target state="translated" xml:lang="en">The CSS styles and <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> can be defined like this:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu70" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu71" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Если на страницу понадобится добавить дополнительные компоненты, содержащие пункты, то появится еще один блок кода с классом <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept>, например:</source><target state="translated" xml:lang="en">If additional components containing items will be added to the page, another code block will appear with the <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> class, for example:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu72" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="snippets"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="item"&gt;</ph> &lt;h2 class="title"&gt;&lt;/h2&gt; <ph id="swf_auto_html_tag-2">&lt;img class="thumb"&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-4">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="snippets"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="item"&gt;</ph> &lt;h2 class="title"&gt;&lt;/h2&gt; <ph id="swf_auto_html_tag-2">&lt;img class="thumb"&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-4">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu73" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В этом случае CSS может быть оформлен с помощью каскадов. Для этого достаточно доопределить правила, уже написанные для <bpt id="1">&lt;code&gt;</bpt>.item<ept id="1">&lt;/code&gt;</ept>:</source><target state="translated" xml:lang="en">In this case, the CSS can be formatted with cascades. To do this, you only need to extend the rules already written for <bpt id="1">&lt;code&gt;</bpt>.item<ept id="1">&lt;/code&gt;</ept>:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu74" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}

.snippets .item
{
    color: red;
    font-size: 14px;
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}

.snippets .item
{
    color: red;
    font-size: 14px;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu75" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Подобный код может работать до тех пор, пока не возникнет необходимость изменить страницу. Например, переместить пункты меню, использовать написанный код в другом месте отдельно от родительского компонента или вложить навигационное меню в блок <bpt id="1">&lt;code&gt;</bpt>snippets<ept id="1">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">Code like this will work until the page has to be changed. For example, until you have to move the menu items, use the code somewhere else separate from the parent component, or nest a navigation menu in the <bpt id="1">&lt;code&gt;</bpt>snippets<ept id="1">&lt;/code&gt;</ept> block.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu76" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Использование каскадов связывает независимые компоненты интерфейса: нет возможности исправить один компонент, не затронув стили другого.</source><target state="translated" xml:lang="en">Using cascades connects independent components of the interface. You can't fix one component without affecting the style of another one.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu77" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Решение<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Solution<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu78" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>Правила по именованию CSS-селекторов<ept id="1">&lt;/a&gt;</ept> дают возможность вносить изменения точечно, не затрагивая зависимые компоненты. В БЭМ каждый блок имеет уникальное имя и является самодостаточным.</source><target state="translated" xml:lang="en"><bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>CSS selector naming rules<ept id="1">&lt;/a&gt;</ept> make it possible to change specific points without affecting dependent components. In BEM, every block has a unique name and is self-sufficient.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu79" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Запишем тот же код в соответствии с правилами именования БЭМ:</source><target state="translated" xml:lang="en">Let's write the same code in conformance with BEM naming rules:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu80" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="12" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans><alt-trans origin="autoFuzzy" ts="29" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu81" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.nav__item
{
    padding: 4px 10px;
    color: black;
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.nav__item
{
    padding: 4px 10px;
    color: black;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="69" match-quality="89" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}<ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.item
{
    padding: 4px 10px;
    color: black;
}<ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu82" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В таком случае добавление нового пункта <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> на страницу будет выглядеть так:</source><target state="translated" xml:lang="en">In this case, adding a new <bpt id="1">&lt;code&gt;</bpt>item<ept id="1">&lt;/code&gt;</ept> to the page will look like this:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu83" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="snippets"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="snippets__item"&gt;</ph> &lt;h2 class="snippets__title"&gt;&lt;/h2&gt; <ph id="swf_auto_html_tag-2">&lt;img class="snippents__thumb"&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-4">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;div class="snippets"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;div class="snippets__item"&gt;</ph> &lt;h2 class="snippets__title"&gt;&lt;/h2&gt; <ph id="swf_auto_html_tag-2">&lt;img class="snippents__thumb"&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;/div&gt;</ph> <ph id="swf_auto_html_tag-4">&lt;/div&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu84" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Пункт <bpt id="1">&lt;code&gt;</bpt>snippets__item<ept id="1">&lt;/code&gt;</ept> будет иметь соответствующие только ему уникальные CSS-правила:</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>snippets__item<ept id="1">&lt;/code&gt;</ept> item will have unique CSS rules that only apply to itself:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu85" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.snippets__item
{
    padding: 4px 10px;
    color: red;
    font-size: 14px;
}<ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt>.snippets__item
{
    padding: 4px 10px;
    color: red;
    font-size: 14px;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu87" restype="x-data-url" xml:space="preserve" approved="yes"><source xml:lang="ru">https://ru.wikipedia.org/wiki/Пространство_имён_%28программирование%29</source><target state="translated" xml:lang="en">https://en.wikipedia.org/wiki/Namespace#In_programming_languages</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu86" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Изменения в <bpt id="1">&lt;code&gt;</bpt>nav__item<ept id="1">&lt;/code&gt;</ept> не влияют на <bpt id="2">&lt;code&gt;</bpt>snippets__item<ept id="2">&lt;/code&gt;</ept>, так как пункты получают уникальные имена благодаря <bpt id="3">&lt;a href="https://ru.wikipedia.org/wiki/Пространство_имён_%28программирование%29" [#$tu87]&gt;</bpt>пространству имен<ept id="3">&lt;/a&gt;</ept>, заданному именем блока. Это позволяет формировать независимые CSS-правила для всех элементов блока.</source><target state="translated" xml:lang="en">Changes to <bpt id="1">&lt;code&gt;</bpt>nav__item<ept id="1">&lt;/code&gt;</ept> do not affect <bpt id="2">&lt;code&gt;</bpt>snippets__item<ept id="2">&lt;/code&gt;</ept>, since the items get different unique names due to the <bpt id="3">&lt;a href="https://ru.wikipedia.org/wiki/Пространство_имён_%28программирование%29" [#$tu87]&gt;</bpt>namespace<ept id="3">&lt;/a&gt;</ept> defined by the block name. This allows forming independent CSS rules for all elements of a block.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu88" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такой подход дает возможность защитить элементы от взаимного влияния друг на друга — элементы всегда являются частью блока. Такой же принцип работы использует и Shadow DOM в Web Components. Но, в отличие от Shadow DOM, применение соглашения по именованию БЭМ не зависит от совместимости с работой браузеров.</source><target state="translated" xml:lang="en">This approach makes it possible to protect elements from mutually affecting each other — elements are always part of a block. The same principle is used by Shadow DOM in Web Components. However, in contrast to Shadow DOM, BEM naming conventions are applied without regard for browser compatibility.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu89" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Блоки <bpt id="1">&lt;code&gt;</bpt>snippets<ept id="1">&lt;/code&gt;</ept> и <bpt id="2">&lt;code&gt;</bpt>nav<ept id="2">&lt;/code&gt;</ept> можно повторно использовать и перемещать по странице или проекту. Уникальность имен классов, основанная на правилах именования БЭМ, позволяет блокам не зависеть друг от друга.</source><target state="translated" xml:lang="en">The <bpt id="1">&lt;code&gt;</bpt>snippets<ept id="1">&lt;/code&gt;</ept> and <bpt id="2">&lt;code&gt;</bpt>nav<ept id="2">&lt;/code&gt;</ept> blocks can be reused and moved within the page or project. The uniqueness of class names based on BEM naming rules allows blocks to be independent of each other.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu90" resname="----id" restype="x-h3" xml:space="preserve" approved="yes"><source xml:lang="ru">Использование каскадов в БЭМ</source><target state="translated" xml:lang="en">Using cascades in BEM</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu91" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Методология БЭМ допускает использование каскадов.</source><target state="translated" xml:lang="en">The BEM methodology allows using cascades.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu92" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Например, каскад уместен, чтобы менять элементы в зависимости от состояния блока или заданной ему темы:</source><target state="translated" xml:lang="en">For example, a cascade is appropriate for changing elements depending on the state of the block or the theme assigned to it:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu93" restype="x-pre" xml:space="preserve" approved="yes">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.nav_hovered .nav__link
{
    text-decoration: underline;
}<ept id="1">&lt;/code&gt;</ept></source>
   <target xml:lang="en" state="needs-review-translation"><bpt id="1">&lt;code&gt;</bpt>.nav_hovered .nav__link
{
    text-decoration: underline;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu94" restype="x-pre" xml:space="preserve" approved="yes">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt>.nav_theme_islands .nav__item
{
    line-height: 1.5;
}<ept id="1">&lt;/code&gt;</ept></source>
   <target xml:lang="en" state="needs-review-translation"><bpt id="1">&lt;code&gt;</bpt>.nav_theme_islands .nav__item
{
    line-height: 1.5;
}<ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu95" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Важно!<ept id="1">&lt;/strong&gt;</ept> Применение каскада увеличивает связанность кода и делает его повторное использование невозможным.<ph id="2">&lt;br /&gt;</ph>________________________________________________</source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Important!<ept id="1">&lt;/strong&gt;</ept> Applying a cascade increases code connectivity and makes reuse impossible.<ph id="2">&lt;br /&gt;</ph>________________________________________________</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu96" restype="x-paragraph" xml:space="preserve" approved="yes">
<source xml:lang="ru"><bpt id="1">&lt;a preserve="1" name="bem-mix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></source>
   <target xml:lang="en" state="needs-review-translation"><bpt id="1">&lt;a preserve="1" name="bem-mix"&gt;</bpt><ept id="1">&lt;/a&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu97" resname="------dom----copy-paste-id" restype="x-h2" xml:space="preserve" approved="yes"><source xml:lang="ru">Как разместить несколько сущностей на одном DOM-узле и избежать «Copy-Paste»</source><target xml:lang="en" state="translated">How to host multiple entities on the same DOM node and avoid "Copy-Paste"</target><?sid 1585705226-0?><alt-trans match-quality="100" xml:space="default" origin="bem">
<?id 1585705226-0-115157?>
<source xml:lang="ru">Как разместить несколько сущностей на одном DOM-узле и избежать «Copy-Paste»</source>
<target xml:lang="en">How to host multiple entitites on the same DOM node and avoid "Copy-Paste"</target>
<prop-group>
<prop prop-type="creationdate">20150914T081728Z</prop>
<prop prop-type="tuid">1585705226-0-115157</prop>
</prop-group>
</alt-trans><alt-trans origin="autoFuzzy" ts="5" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;a href="#Как-разместить-несколько-сущностей-на-одном-dom-узле-и-избежать-copy-paste"&gt;</bpt>Как разместить несколько сущностей на одном DOM-узле и избежать «Copy-Paste»<ept id="1">&lt;/a&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;a href="#Как-разместить-несколько-сущностей-на-одном-dom-узле-и-избежать-copy-paste"&gt;</bpt>How to host multiple entitites on the same DOM node and avoid "Copy-Paste"<ept id="1">&lt;/a&gt;</ept></target>

<?id 1442220207536?></alt-trans></trans-unit>
      <trans-unit id="tu98" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Проблема<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Problem<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu99" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">При работе с проектами может потребоваться повторно использовать реализованную функциональность.</source><target state="translated" xml:lang="en">When working with projects, an implemented functionality may need to be reused.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu100" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Во многих случаях такую проблему решают копированием нужной части кода в новый компонент. Такой подход имеет следующие недостатки:</source><target state="translated" xml:lang="en">In many cases, this issue is resolved by copying the desired chunk of code to the new component. This approach has the following disadvantages:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu101" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">увеличивается кодовая база проекта;</source><target state="translated" xml:lang="en">The project's code base increases.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu102" restype="x-li" xml:space="preserve" approved="yes"><source xml:lang="ru">затрудняется отладка кода при выявлении ошибки.</source><target state="translated" xml:lang="en">Debugging becomes more difficult if errors are detected.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu103" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Как следствие, разработчик вынужден поддерживать большее количество строк кода, а исправления необходимо вносить отдельно в каждую реализацию. Это увеличивает временные затраты на отладку и поддержку проекта.</source><target state="translated" xml:lang="en">The consequence is that the developer has to support more lines of code, and fixes must be made separately in each implementation. This increases the time spent on debugging and maintaining the project.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu104" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;strong&gt;</bpt>Решение<ept id="1">&lt;/strong&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;strong&gt;</bpt>Solution<ept id="1">&lt;/strong&gt;</ept></target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu105" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Воспользуемся примером, который реализует универсальный блок навигационного меню и написан по всем <bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>правилам именования БЭМ<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">We'll use an example that implements a universal navigation menu block and follows all the <bpt id="1">&lt;a href="../naming/naming-convention.ru.md"&gt;</bpt>BEM naming rules<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu106" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="12" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans><alt-trans origin="autoFuzzy" ts="29" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu107" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такой блок можно использовать, например, для навигации по статьям в блоке новостей.</source><target state="translated" xml:lang="en">This block could be used, for example, for navigating articles in a news section.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu108" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Допустим, в разделе новостей уже есть блок <bpt id="1">&lt;code&gt;</bpt>articles<ept id="1">&lt;/code&gt;</ept>, которому написаны все необходимые CSS-правила.</source><target state="translated" xml:lang="en">Let's assume that the news section already has the <bpt id="1">&lt;code&gt;</bpt>articles<ept id="1">&lt;/code&gt;</ept> block with all the necessary CSS rules.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu109" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Смешать реализации двух разных блоков без копирования кода можно при помощи <bpt id="1">&lt;a href="../definitions/definitions.ru.md#Микс"&gt;</bpt>микса<ept id="1">&lt;/a&gt;</ept>. То есть разместить на одном DOM-узле блок <bpt id="2">&lt;code&gt;</bpt>nav<ept id="2">&lt;/code&gt;</ept> и элемент <bpt id="3">&lt;code&gt;</bpt>articles__nav<ept id="3">&lt;/code&gt;</ept>.</source><target state="translated" xml:lang="en">We can use a <bpt id="1">&lt;a href="../definitions/definitions.ru.md#Микс"&gt;</bpt>mix<ept id="1">&lt;/a&gt;</ept> to combine the implementation of the two different blocks without copying code. In other words, host the <bpt id="2">&lt;code&gt;</bpt>nav<ept id="2">&lt;/code&gt;</ept> block and the <bpt id="3">&lt;code&gt;</bpt>articles__nav<ept id="3">&lt;/code&gt;</ept> element on the same DOM node.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu110" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">В коде это будет выглядеть так:</source><target state="translated" xml:lang="en">The code will look like this:</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu111" restype="x-pre" xml:space="preserve" approved="yes"><source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav articles__nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source><target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav articles__nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target><?sid 1585705226-0?><alt-trans origin="autoFuzzy" ts="12" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="item active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="link"&gt;</ph>Two<ph id="swf_auto_html_tag-9">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-10">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="link"&gt;</ph>Three<ph id="swf_auto_html_tag-11">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-12">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-13">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans><alt-trans origin="autoFuzzy" ts="29" match-quality="99" tool="Swordfish">
<source xml:lang="ru"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></source>
<target state="translated" xml:lang="en"><bpt id="1">&lt;code&gt;</bpt><ph id="swf_auto_html_tag-0">&lt;ul class="nav"&gt;</ph> <ph id="swf_auto_html_tag-1">&lt;li class="nav__item nav__item_active"&gt;</ph><ph id="swf_auto_html_tag-2">&lt;a preserve="1" class="nav__link"&gt;</ph>One<ph id="swf_auto_html_tag-7">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-8">&lt;/span&gt;</ph><ph id="swf_auto_html_tag-9">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-3">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-4">&lt;a preserve="1" class="nav__link"&gt;</ph>Two<ph id="swf_auto_html_tag-10">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-11">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-5">&lt;li class="nav__item"&gt;</ph><ph id="swf_auto_html_tag-6">&lt;a preserve="1" class="nav__link"&gt;</ph>Three<ph id="swf_auto_html_tag-12">&lt;/a&gt;</ph><ph id="swf_auto_html_tag-13">&lt;/li&gt;</ph> <ph id="swf_auto_html_tag-14">&lt;/ul&gt;</ph><ept id="1">&lt;/code&gt;</ept></target>
</alt-trans></trans-unit>
      <trans-unit id="tu112" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Такая реализация позволит объединить функциональность блока <bpt id="1">&lt;code&gt;</bpt>nav<ept id="1">&lt;/code&gt;</ept> и особенности реализации элемента <bpt id="2">&lt;code&gt;</bpt>articles__nav<ept id="2">&lt;/code&gt;</ept> (внешний вид новостных статей в меню). При этом нет необходимости копировать уже имеющиеся CSS-правила. При обнаружении ошибки, правки необходимо будет внести только в одну часть кода.</source><target state="translated" xml:lang="en">This implementation allows combining the functionality of the <bpt id="1">&lt;code&gt;</bpt>nav<ept id="1">&lt;/code&gt;</ept> block with the specific implementation of the <bpt id="2">&lt;code&gt;</bpt>articles__nav<ept id="2">&lt;/code&gt;</ept> element (the appearance of news articles in the menu). However, there is no need to copy the existing CSS rules. If a bug is detected, only one part of the code will have to be fixed.</target><?sid 1585705226-0?></trans-unit>
      <trans-unit id="tu113" restype="x-paragraph" xml:space="preserve" approved="yes"><source xml:lang="ru">Миксовать можно не только блоки с элементами, но и другие БЭМ-сущности. Подробнее о вариантах использования миксов в БЭМ читайте в разделе <bpt id="1">&lt;a href="../definitions/definitions.ru.md#Микс"&gt;</bpt>Основные понятия БЭМ<ept id="1">&lt;/a&gt;</ept>.</source><target state="translated" xml:lang="en">In addition to blocks and elements, you can mix other BEM entities, as well. For more information about ways to use mixes in BEM, see the section <bpt id="1">&lt;a href="../definitions/definitions.ru.md#Микс"&gt;</bpt>Basic BEM concepts<ept id="1">&lt;/a&gt;</ept>.</target><?sid 1585705226-0?></trans-unit>
    </body>
  </file>
</xliff>